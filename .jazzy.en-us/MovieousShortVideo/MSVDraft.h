//
//  MSVDraft.h
//  MovieousShortVideo
//
//  Created by Chris Wang on 2018/10/5.
//  Copyright © 2018 Movieous Team. All rights reserved.
//

#import <AVFoundation/AVFoundation.h>
#import <MovieousBase/MovieousBase.h>
#import "MSVTypeDefines.h"
#import "MSVMainTrackClip.h"
#import "MSVClip.h"
#import "MSVLUTFilterEditorEffect.h"
#import "MSVEditorEffect.h"
#import "MSVMixTrackClip.h"
#import "MSVSnapshotGenerator.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * Video drafts, callers can generate drafts themselves or edit them arbitrarily with drafts，Then use MSVEditor to generate a preview of the draft in real time, or you can use MSVExporter to export the draft.
 */
@interface MSVDraft : MovieousObject
<
NSCopying
>

/**
 * Initialize a draft using the audio and video file path, and the initial draft will contain an path that the MSVMainTrackClip points to.
 *
 * @param path Audio and video file path.
 * @param outError If an error occurs, return the error that occurred.
 *
 * @return Initialized successful draft object
 */
+ (instancetype _Nullable)draftWithAVPath:(NSString *)path error:(NSError *_Nullable *_Nullable)outError;

/**
 * Create a draft object in using the image file path, and the initial draft will contain an path that the MSVMainTrackClip points to.
 *
 * @param path Image file path.
 * @param outError If an error occurs, return the error that occurred.
 *
 * @return If the creation is successful, the draft object is returned, otherwise returns nil
 */
+ (instancetype _Nullable)draftWithImagePath:(NSString *)path error:(NSError *_Nullable *_Nullable)outError;

/**
 * Initialize the draft object.
 *
 * @param mainTrackClipType The Main track segment type.
 * @param path The Main track segment path.
 * @param outError If an error occurs, return the error that occurred.
 *
 * @return If the initialization is successful, the draft object is returned, otherwise returns nil.
 */
- (instancetype _Nullable)initWithMainTrackClipType:(MSVClipType)mainTrackClipType path:(NSString *)path error:(NSError *_Nullable *_Nullable)outError;

/**
 * Indicate the background color for video display, if video has not cover the whole space whose size is assigned by the videoSize property.
 */
@property (nonatomic, strong, readonly) UIColor *backgroundColor;

/**
 * Update the background color for video display.
 *
 * @param backgroundColor The new background color.
 * @param outError If an error occurs, return the error that occurred.
 *
 * @return If operation succeeded, return YES, otherwise, return NO.
 */
- (BOOL)updateBackgroundColor:(UIColor *)backgroundColor error:(NSError *_Nullable *_Nullable)outError NS_SWIFT_NAME(update(backgroundColor:));

/**
 * The main track clip array, the main track clip is arranged in the order of the duration specified by its durationAtMainTrack to form the main track of the video, and the length of the draft is determined by the length of the main track.
 */
@property (nonatomic, strong, readonly) NSArray<MSVMainTrackClip *> *mainTrackClips;

/**
 * Update the main track clip set. Non-Readonly parameters can be adjusted directly in related objects. Other operations (add, delete, replace, etc.) need to be refreshed using this interface.
 *
 * @param mainTrackClips The new main track clip set.
 * @param outError If an error occurs, return the error that occurred.
 *
 * @return Valid operation returns YES, invalid operation returns NO.
 */
- (BOOL)updateMainTrackClips:(NSArray<MSVMainTrackClip *> *_Nullable)mainTrackClips error:(NSError *_Nullable *_Nullable)outError NS_SWIFT_NAME(update(mainTrackClips:));

/**
 * The mix track clip array, the visual part of the video is generated by mixing the video in mainTrackClips and mixTrackClips according to the location of these clips.
 */
@property (nonatomic, strong, readonly) NSArray<MSVMixTrackClip *> *mixTrackClips;

/**
 * Update the mix track clips. Non-Readonly parameters can be adjusted directly in related objects. Other operations (add, delete, replace, etc.) need to be refreshed using this interface.
 *
 * @param mixTrackClips The new mixTrackClips.
 * @param outError If an error occurs, return the error that occurred.
 *
 * @return Valid operation returns YES, invalid operation returns NO.
 */
- (BOOL)updateMixTrackClips:(NSArray<MSVMixTrackClip *> *_Nullable)mixTrackClips error:(NSError *_Nullable *_Nullable)outError NS_SWIFT_NAME(update(mixTrackClips:));

/**
 * Basic effects array，so far we support MSVExternalFilterEditorEffect, MSVLUTFilterEditorEffect, MSVImageEffect, all of these effects will be used on the final video.
 */
@property (nonatomic, strong, readonly) NSArray<id<MSVEditorEffect>> *basicEffects;

/**
 * Update the basic effect sets.
 *
 * @param basicEffects the new effect sets.
 * @param outError If an error occurs, return the error that occurred.
 *
 * @return If operation succeeded, return YES, otherwise, return NO.
 */
- (BOOL)updateBasicEffects:(NSArray<id<MSVEditorEffect>> *_Nullable)basicEffects error:(NSError *_Nullable *_Nullable)outError NS_SWIFT_NAME(update(basicEffects:));

/**
 * Draft duration in total (regardless of timeRange).
 */
@property (nonatomic, assign, readonly) NSTimeInterval duration;

/**
 * The size of the video.
 */
@property (nonatomic, assign, readonly) CGSize videoSize;

/**
 * Set the size of the video, if the size of the window does not match the size of the videoSize when previewing, Scaling depends on method specified by editor.previewScalingMode.
 *
 * @param videoSize The new size of the video.
 * @param outError If an error occurs, return the error that occurred.
 *
 * @return If operation succeeded, return YES, otherwise, return NO.
 */
- (BOOL)updateVideoSize:(CGSize)videoSize error:(NSError *_Nullable *_Nullable)outError NS_SWIFT_NAME(update(videoSize:));

/**
 * Frame rate of the destination video.
 */
@property (nonatomic, assign, readonly) float frameRate;

/**
 * Valid time area, other parts will be ignored.
 *
 * @warning The time interval here is the interval after the time effect is applied, if timeRange was setup by callers, after the main track was relevantly operated like added, deleted, or time effects, the timeRange should be adjusted to ensure that the correct time range is applied.
 */
@property (nonatomic, assign) MovieousTimeRange timeRange;

/**
 * Get the image generator object used for generating snapshots.
 *
 * @return The instantiated MSVImageGenerator object.
 */
@property (nonatomic, strong) MSVSnapshotGenerator *imageGenerator;

/**
 * In addition to the volume updating, you can call this method to start a transaction when you need to manipulate the related properties in batches, and then call the -commitChangeWithError: method to commit all changes after all the operations are completed.
 */
- (void)beginChangeTransaction;

/**
 * Submit an update to the general properties.
 *
 * @param outError If an error occurs, return the error that occurred.
 *
 * @return If operation succeeded, return YES, otherwise, return NO.
 */
- (BOOL)commitChangeWithError:(NSError *_Nullable *_Nullable)outError;

@end

NS_ASSUME_NONNULL_END
